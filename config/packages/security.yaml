security:
    # Configuration de hachage des mots de passe (remplace "encoders")
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # Configuration des fournisseurs d'utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    # Configuration des firewalls
    firewalls:
        dev: # Firewall pour le dev : fichiers statiques, profiler, etc.
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login          # Route où le formulaire de connexion est affiché
                check_path: app_login    # Route pour valider les identifiants
                enable_csrf: true             # Ajoutez cette option si vous utilisez des tokens CSRF
                csrf_token_id: authenticate   # ID du token CSRF
                username_parameter: username     # Le champ "name" du formulaire pour l'e-mail
                password_parameter: password  # Le champ "name" du formulaire pour le mot de passe
                default_target_path: home # Où rediriger après authentification
            logout:
                path: app_logout
                target: app_login
    # Contrôle des accès en fonction des rôles
    access_control:
        - { path: ^/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY } # La page de login accessible à tous
        - { path: ^/logout, roles: IS_AUTHENTICATED_ANONYMOUSLY } # Logout accessible à tous
        - { path: ^/admin, roles: ROLE_ADMIN } # Les admins uniquement
        - { path: ^/$, roles: ROLE_USER } # Par défaut, tout utilisateur connecté

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
